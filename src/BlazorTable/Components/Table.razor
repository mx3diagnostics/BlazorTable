@namespace BlazorTable
@typeparam TableItem


<CascadingValue Value="(ITable<TableItem>)this" Name="Table">
    @if (TempItems != null)
    {
        <div class="table-pager">
            <span>
                @if (HasFilterbox)
                {
                    <a @onclick="ToggleFilterBox" style="cursor: pointer; " class="@filterButtonClass"><i class="fas fa-filter"></i> Filters</a>
                }
                <span style="margin-left: 6px;">@CountText</span>
            </span>
            <ul class="pagination">
                <li class="page-item @(PageNumber == 0 ? "disabled": "")" @onclick="@(() => FirstPage())" title="First"><i class="fas fa-angle-double-left"></i></li>
                <li class="page-item @(PageNumber == 0 ? "disabled": "")" @onclick="@(() => PreviousPage())" title="Previous"><i class="fas fa-angle-left"></i></li>

                <li class="page-item pages"><input class="pager" @bind="PageNumberText" /> of @(TotalPages)</li>

                <li class="page-item @(PageNumber + 1 < TotalPages ? "" : "disabled")" @onclick="@(() => NextPage())" title="Next"><i class="fas fa-angle-right"></i></li>
                <li class="page-item @(PageNumber + 1 != TotalPages ? "" : "disabled")" @onclick="@(() => LastPage())" title="Last"><i class="fas fa-angle-double-right"></i></li>
            </ul>
            <span><input class="pager" @bind="@PageSizeText" /> per page</span>
        </div>

    }
    @ChildContent
</CascadingValue>
<div class="popfilterbox @filterboxCollapseClass">
    @_filterboxTemplate
</div>

@if (Columns.Any())
{
    <table class="@TableClass" @attributes="UnknownParameters">
        @if (TempItems != null)
        {
            <thead class="@TableHeadClass">
                <tr style="cursor: pointer;">
                    @foreach (IColumn<TableItem> column in Columns)
                    {
                        <th style="@(!string.IsNullOrEmpty(column.Width) ? $"width:{column.Width};" : "") user-select: none"
                            @ondrop="@(() => HandleDrop(column))"
                            @ondragstart="@(() => HandleDragStart(column))"
                            ondragover="event.preventDefault();"
                            draggable="@(ColumnReorder.ToString())"
                            @key="column"
                            class="@(column.Class)">

                            <div @onclick="@(() => column.SortBy())">
                                <span>@column.Title</span>

                                @if (column.SortColumn)
                                {
                                    if (column.SortDescending)
                                    {<span>&#11014;</span> }
                                    else
                                    { <span>&#11015;</span>}
                                }

                                @if (column.Filterable)
                                {
                                    <span @onclick="@((x) => column.ToggleFilter())" @onclick:stopPropagation>
                                        <a href="javascript:;" @ref="column.FilterRef" style="text-decoration: none"><span style="@(column.Filter == null ? "opacity: 0.2;" : string.Empty)">&#128269;</span></a>
                                    </span>
                                }
                            </div>
                        </th>
                    }
                </tr>
            </thead>
            <tbody class="@TableBodyClass">
                @if (TempItems.Any())
                {
                    @foreach (TableItem item in TempItems)
                    {
                        <tr @key="item" class="@RowClass(item)">
                            @foreach (IColumn<TableItem> column in Columns)
                            {
                                <td @key="column" style="@(column.Align == Align.Left ? "text-align: left;" : column.Align == Align.Center ? "text-align: center;" : column.Align == Align.Right ? "text-align: right;" : string.Empty)"
                                    class="@(column.Class)">
                                    @if (IsEditMode && column.EditTemplate != null)
                                    {
                                        @column.EditTemplate(item)
                                    }
                                    else
                                    {
                                        if (column.Template == null)
                                        {
                                            @column.Render(item);
                                        }
                                        else
                                        {
                                            @column.Template(item);
                                        }
                                    }
                                </td>
                            }
                        </tr>
                    }
                }
                else if (_emptyDataTemplate != null)
                {
                    <tr>
                        <td colspan="@Columns.Count">
                            @_emptyDataTemplate
                        </td>
                    </tr>
                }
            </tbody>
        }
        else
        {
            <tr>
                <td colspan="@Columns.Count">
                    @if (_loadingDataTemplate != null)
                    {
                        @_loadingDataTemplate
                    }
                    else
                    {
                        <div class="text-center">
                            Loading...
                        </div>
                    }
                </td>
            </tr>
        }
    </table>
}
